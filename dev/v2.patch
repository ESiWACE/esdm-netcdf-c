diff --git a/include/netCDF4.pxi b/include/netCDF4.pxi
index 6912ab53..98dda69b 100644
--- a/include/netCDF4.pxi
+++ b/include/netCDF4.pxi
@@ -47,6 +47,7 @@ cdef extern from "netcdf.h":
         # Use these 'mode' flags for nc_open. 
         NC_NOWRITE # default is read only 
         NC_WRITE # read & write 
+        NC_ESDM # ESDM support for Python
         # Use these 'mode' flags for nc_create. 
         NC_CLOBBER 
         NC_NOCLOBBER # Don't destroy existing file on create 
@@ -122,6 +123,7 @@ cdef extern from "netcdf.h":
         NC_FORMAT_NC3
         NC_FORMAT_NC_HDF4
         NC_FORMAT_NC_HDF5
+        NC_FORMATX_ESDM
         NC_FORMAT_DAP2
         NC_FORMAT_DAP4
         NC_FORMAT_PNETCDF
@@ -704,7 +706,7 @@ IF HAS_NC_CREATE_MEM:
             int flags
         int nc_close_memio(int ncid, NC_memio* info);
 
-IF HAS_PARALLEL4_SUPPORT or HAS_PNETCDF_SUPPORT:
+IF HAS_PARALLEL4_SUPPORT or HAS_PNETCDF_SUPPORT or HAS_ESDM_SUPPORT:
     cdef extern from "mpi-compat.h": pass
     cdef extern from "netcdf_par.h":
         ctypedef int MPI_Comm
diff --git a/setup.py b/setup.py
index 99df3ede..25159311 100644
--- a/setup.py
+++ b/setup.py
@@ -71,6 +71,7 @@ def check_api(inc_dirs,netcdf_lib_version):
     has_parallel_support = False
     has_parallel4_support = False
     has_pnetcdf_support = False
+    has_esdm_support = False
 
     for d in inc_dirs:
         try:
@@ -81,13 +82,13 @@ def check_api(inc_dirs,netcdf_lib_version):
         has_nc_open_mem = os.path.exists(os.path.join(d, 'netcdf_mem.h'))
 
         for line in f:
-            if line.startswith('nc_rename_grp'):
+            if line.find('nc_rename_grp') != -1:
                 has_rename_grp = True
-            if line.startswith('nc_inq_path'):
+            if line.find('nc_inq_path') != -1:
                 has_nc_inq_path = True
-            if line.startswith('nc_inq_format_extended'):
+            if line.find('nc_inq_format_extended') != -1:
                 has_nc_inq_format_extended = True
-            if line.startswith('#define NC_FORMAT_64BIT_DATA'):
+            if line.find('#define NC_FORMAT_64BIT_DATA') != -1:
                 has_cdf5_format = True
 
         if has_nc_open_mem:
@@ -606,6 +607,7 @@ if 'sdist' not in sys.argv[1:] and 'clean' not in sys.argv[1:] and '--version' n
     else:
         sys.stdout.write('netcdf lib does not have pnetcdf parallel functions\n')
         f.write('DEF HAS_PNETCDF_SUPPORT = 0\n')
+    f.write('DEF HAS_ESDM_SUPPORT = 1\n') # TODO Fixme
 
     f.close()
 
diff --git a/src/netCDF4/_netCDF4.pyx b/src/netCDF4/_netCDF4.pyx
index 66b7d819..1106f830 100644
--- a/src/netCDF4/_netCDF4.pyx
+++ b/src/netCDF4/_netCDF4.pyx
@@ -1245,7 +1245,7 @@ import_array()
 include "constants.pyx"
 include "membuf.pyx"
 include "netCDF4.pxi"
-IF HAS_PARALLEL4_SUPPORT or HAS_PNETCDF_SUPPORT:
+IF HAS_PARALLEL4_SUPPORT or HAS_PNETCDF_SUPPORT or HAS_ESDM_SUPPORT:
     cimport mpi4py.MPI as MPI
     from mpi4py.libmpi cimport MPI_Comm, MPI_Info, MPI_Comm_dup, MPI_Info_dup, \
                                MPI_Comm_free, MPI_Info_free, MPI_INFO_NULL,\
@@ -1367,11 +1367,13 @@ _intnptonctype  = {'i1' : NC_BYTE,
 # create dictionary mapping string identifiers to netcdf format codes
 _format_dict  = {'NETCDF3_CLASSIC' : NC_FORMAT_CLASSIC,
                  'NETCDF4_CLASSIC' : NC_FORMAT_NETCDF4_CLASSIC,
-                 'NETCDF4'         : NC_FORMAT_NETCDF4}
+                 'NETCDF4'         : NC_FORMAT_NETCDF4,
+                 'ESDM'            : NC_FORMATX_ESDM}
 # create dictionary mapping string identifiers to netcdf create format codes
 _cmode_dict  = {'NETCDF3_CLASSIC' : NC_CLASSIC_MODEL,
                 'NETCDF4_CLASSIC' : NC_CLASSIC_MODEL | NC_NETCDF4,
-                'NETCDF4'         : NC_NETCDF4}
+                'NETCDF4'         : NC_NETCDF4,
+                'ESDM'            : NC_ESDM}
 IF HAS_CDF5_FORMAT:
     # NETCDF3_64BIT deprecated, saved for compatibility.
     # use NETCDF3_64BIT_OFFSET instead.
@@ -1567,6 +1569,8 @@ cdef _get_full_format(int grpid):
             return 'DAP2'
         elif formatp == NC_FORMAT_DAP4:
             return 'DAP4'
+        elif formatp == NC_FORMATX_ESDM:
+            return 'ESDM'
         elif formatp == NC_FORMAT_UNDEFINED:
             return 'UNDEFINED'
     ELSE:
@@ -1613,7 +1617,7 @@ be raised in the next release."""
     # if array is 64 bit integers or
     # if 64-bit datatype not supported, cast to 32 bit integers.
     fmt = _get_format(grp._grpid)
-    is_netcdf3 = fmt.startswith('NETCDF3') or fmt == 'NETCDF4_CLASSIC'
+    is_netcdf3 = fmt.startswith('NETCDF3') or fmt == 'NETCDF4_CLASSIC' or fmt == 'ESDM'
     if value_arr.dtype.str[1:] == 'i8' and ('i8' not in _supportedtypes or\
        (is_netcdf3 and fmt != 'NETCDF3_64BIT_DATA')):
         value_arr = value_arr.astype('i4')
@@ -1640,7 +1644,7 @@ be raised in the next release."""
                 PyMem_Free(string_ptrs)
         else:
             # don't allow string array attributes in NETCDF3 files.
-            if is_netcdf3 and N > 1:
+            if is_netcdf3 and N > 1 and fmt != 'ESDM':
                 msg='array string attributes can only be written with NETCDF4'
                 raise IOError(msg)
             if not value_arr.shape:
@@ -2004,7 +2008,7 @@ of the [EnumType](#EnumType) class.
 
 **`data_model`**: `data_model` describes the netCDF
 data model version, one of `NETCDF3_CLASSIC`, `NETCDF4`,
-`NETCDF4_CLASSIC`, `NETCDF3_64BIT_OFFSET` or `NETCDF3_64BIT_DATA`.
+`NETCDF4_CLASSIC`, `ESDM`, `NETCDF3_64BIT_OFFSET` or `NETCDF3_64BIT_DATA`.
 
 **`file_format`**: same as `data_model`, retained for backwards compatibility.
 
@@ -2070,7 +2074,7 @@ strings.
 
         **`format`**: underlying file format (one of `'NETCDF4',
         'NETCDF4_CLASSIC', 'NETCDF3_CLASSIC'`, `'NETCDF3_64BIT_OFFSET'` or
-        `'NETCDF3_64BIT_DATA'`.
+        `'NETCDF3_64BIT_DATA'` or ESDM.
         Only relevant if `mode = 'w'` (if `mode = 'r','a'` or `'r+'` the file format
         is automatically detected). Default `'NETCDF4'`, which means the data is
         stored in an HDF5 file, using netCDF 4 API features.  Setting
@@ -2138,7 +2142,7 @@ strings.
         cdef char *path
         cdef char namstring[NC_MAX_NAME+1]
         cdef int cmode
-        IF HAS_PARALLEL4_SUPPORT or HAS_PNETCDF_SUPPORT:
+        IF HAS_PARALLEL4_SUPPORT or HAS_PNETCDF_SUPPORT or HAS_ESDM_SUPPORT:
             cdef MPI_Comm mpicomm
             cdef MPI_Info mpiinfo
 
@@ -2165,7 +2169,7 @@ strings.
                 msg='parallel mode requires MPI enabled netcdf-c'
                 raise ValueError(msg)
             ELSE:
-                parallel_formats = []
+                parallel_formats = ['ESDM']
                 IF HAS_PARALLEL4_SUPPORT:
                     parallel_formats += ['NETCDF4','NETCDF4_CLASSIC']
                 IF HAS_PNETCDF_SUPPORT:
@@ -2204,7 +2208,7 @@ strings.
             else:
                 if clobber:
                     if parallel:
-                        IF HAS_PARALLEL4_SUPPORT or HAS_PNETCDF_SUPPORT:
+                        IF HAS_PARALLEL4_SUPPORT or HAS_PNETCDF_SUPPORT or HAS_ESDM_SUPPORT:
                             ierr = nc_create_par(path, NC_CLOBBER | cmode, \
                                    mpicomm, mpiinfo, &grpid)
                         ELSE:
@@ -2254,7 +2258,7 @@ strings.
         version 4.4.1 or higher of the netcdf C lib, and rebuild netcdf4-python."""
                     raise ValueError(msg)
             elif parallel:
-                IF HAS_PARALLEL4_SUPPORT or HAS_PNETCDF_SUPPORT:
+                IF HAS_PARALLEL4_SUPPORT or HAS_PNETCDF_SUPPORT or HAS_ESDM_SUPPORT:
                     ierr = nc_open_par(path, NC_NOWRITE | NC_MPIIO, \
                            mpicomm, mpiinfo, &grpid)
                 ELSE:
@@ -2856,7 +2860,7 @@ Use if you need to ensure that a netCDF attribute is created with type
 `NC_STRING` if the file format is `NETCDF4`."""
         cdef nc_type xtype
         xtype=-99
-        if self.data_model != 'NETCDF4':
+        if self.data_model != 'NETCDF4' and self.data_model != 'ESDM':
             msg='file format does not support NC_STRING attributes'
             raise IOError(msg)
         _set_att(self, NC_GLOBAL, name, value, xtype=xtype, force_ncstring=True)
@@ -3491,7 +3495,7 @@ return the group that this [Dimension](#Dimension) is a member of."""
 returns `True` if the [Dimension](#Dimension) instance is unlimited, `False` otherwise."""
         cdef int ierr, n, numunlimdims, ndims, nvars, ngatts, xdimid
         cdef int *unlimdimids
-        if self._data_model == 'NETCDF4':
+        if self._data_model == 'NETCDF4' or self._data_model == "ESDM":
             ierr = nc_inq_unlimdims(self._grpid, &numunlimdims, NULL)
             _ensure_nc_success(ierr)
             if numunlimdims == 0:
@@ -4147,7 +4151,7 @@ Use if you need to ensure that a netCDF attribute is created with type
 Use if you need to set an attribute to an array of variable-length strings."""
         cdef nc_type xtype
         xtype=-99
-        if self._grp.data_model != 'NETCDF4':
+        if self._grp.data_model != 'NETCDF4' and self._grp.data_model != 'ESDM':
             msg='file format does not support NC_STRING attributes'
             raise IOError(msg)
         _set_att(self._grp, self._varid, name, value, xtype=xtype, force_ncstring=True)
